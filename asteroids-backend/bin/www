#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('asteroids:server');
var http = require('http');
var Game = require('../game/Game')();
var Ship = require('../game/Ship');
var Bullet = require('../game/Bullet');
var Sprite = require('../game/Sprite');
var h = require('../game/helpers');

GRID_SIZE = h[0];
GridNode= h[2];
Matrix = h[1];


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var gridWidth = Math.round(Game.canvasWidth / GRID_SIZE);
var gridHeight = Math.round(Game.canvasHeight / GRID_SIZE);
console.log(GRID_SIZE);
var grid = new Array(gridWidth);
for (var i = 0; i < gridWidth; i++) {
  grid[i] = new Array(gridHeight);
  for (var j = 0; j < gridHeight; j++) {
    grid[i][j] = new GridNode();
  }
}

// set up the positional references
for (var i = 0; i < gridWidth; i++) {
  for (var j = 0; j < gridHeight; j++) {
    var node   = grid[i][j];
    node.north = grid[i][(j == 0) ? gridHeight-1 : j-1];
    node.south = grid[i][(j == gridHeight-1) ? 0 : j+1];
    node.west  = grid[(i == 0) ? gridWidth-1 : i-1][j];
    node.east  = grid[(i == gridWidth-1) ? 0 : i+1][j];
  }
}

// set up borders
for (var i = 0; i < gridWidth; i++) {
  grid[i][0].dupe.vertical            =  Game.canvasHeight;
  grid[i][gridHeight-1].dupe.vertical = -Game.canvasHeight;
}

for (var j = 0; j < gridHeight; j++) {
  grid[0][j].dupe.horizontal           =  Game.canvasWidth;
  grid[gridWidth-1][j].dupe.horizontal = -Game.canvasWidth;
}

var sprites = [];
Game.sprites = sprites;

// so all the sprites can use it
// Sprite.prototype.context = context;
Sprite.prototype.grid    = grid;
Sprite.prototype.matrix  = new Matrix(2, 3);

var ship = new Ship();

ship.x = Game.canvasWidth / 2;
ship.y = Game.canvasHeight / 2;
ship.id = Game.id++;
console.log(Game.id);

// ship.sprites.push(ship);

Game.ship = ship;
ship.visible = true;
Game.sprites.push(ship);

var io = require('socket.io')(server);

io.on('connection',function(socket){
  module.exports = io;
  console.log('recieved connection');


  socket.on('bullet fire',function(){
    console.log('Somebody is firing the lasers!');
  })

  socket.on('turn',function(status){
    if(status[0]){
      ship.vel.rot -=6;
    }
    if(status[1]){
    ship.vel.rot +=6;
    }
  })

  socket.on('start',function(){
    Game.FSM.start();
    console.log('starting game');
  })

  socket.on('player_join',function(){
    x = ship.x;
    y = ship.y;
    rot = ship.rot;
    velX = ship.vel.x;
    velY = ship.vel.y;
    rotVel = ship.vel.rot;
    socket.emit('data',[x,y,rot],[velX,velY,rotVel],[0,0,0],ship.id,'ship');
    console.log('spawning ship '+ship.id);
  })

  socket.on('move',function(acc){
    console.log('trying to move');
    // var Game = require('../game/Game')();
    ship.acc.x = acc[0];
    ship.acc.y = acc[1];
    socket.emit('update',[ship.x,ship.y,ship.rot],
    [ship.vel.x,ship.vel.y,ship.vel.rot],
    [ship.acc.x, ship.acc.y, ship.acc.rot],ship.id,'ship');
    // console.log(ship.x+' '+ship.y);
  })

  // var updates =setInterval(function(){
  //   Game.updateData(function (data){
  //     socket.emit('update',data);
  //   });
  // },100);

  // socket.on('disconnect',function(){
  //   clearInterval(updates);
  // })

});

var lastFrame = Date.now();
var thisFrame;
var elapsed;
var delta;
var loop = setInterval(function(){
  var Game = require('../game/Game')();
  thisFrame = Date.now();
  elapsed = thisFrame - lastFrame;
  lastFrame = thisFrame;
  delta = elapsed / 30;
  // console.log('ship at: '+ship.x+'  '+ship.y);

  for (i = 0; i < Game.sprites.length; i++) {

    // if(Game.sprites[i].name == 'ship'){
    //   console.log(Game.sprites[i].x+'  '+Game.sprites[i].y);
    // }
    Game.sprites[i].run(delta);

    if (Game.sprites[i].reap) {
      Game.sprites[i].reap = false;
      Game.sprites.splice(i, 1);
      i--;
    }
  }
},100);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function(){
  console.log('listening on port: '+port);
});


server.on('error', onError);
server.on('listening', onListening);






/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
