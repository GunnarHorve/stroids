#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('asteroids:server');
var http = require('http');
var Game = require('../game/Game');
var Ship = require('../game/Ship');
var Bullet = require('../game/Bullet');
var Sprite = require('../game/Sprite');
var h = require('../game/helpers');

GRID_SIZE = h[0];
GridNode= h[2];
Matrix = h[1];


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var gridWidth = Math.round(Game.canvasWidth / GRID_SIZE);
var gridHeight = Math.round(Game.canvasHeight / GRID_SIZE);
console.log(h.GRID_SIZE);
var grid = new Array(gridWidth);
for (var i = 0; i < gridWidth; i++) {
  grid[i] = new Array(gridHeight);
  for (var j = 0; j < gridHeight; j++) {
    grid[i][j] = new GridNode();
  }
}

// set up the positional references
for (var i = 0; i < gridWidth; i++) {
  for (var j = 0; j < gridHeight; j++) {
    var node   = grid[i][j];
    node.north = grid[i][(j == 0) ? gridHeight-1 : j-1];
    node.south = grid[i][(j == gridHeight-1) ? 0 : j+1];
    node.west  = grid[(i == 0) ? gridWidth-1 : i-1][j];
    node.east  = grid[(i == gridWidth-1) ? 0 : i+1][j];
  }
}

// set up borders
for (var i = 0; i < gridWidth; i++) {
  grid[i][0].dupe.vertical            =  Game.canvasHeight;
  grid[i][gridHeight-1].dupe.vertical = -Game.canvasHeight;
}

for (var j = 0; j < gridHeight; j++) {
  grid[0][j].dupe.horizontal           =  Game.canvasWidth;
  grid[gridWidth-1][j].dupe.horizontal = -Game.canvasWidth;
}

var sprites = [];
Game.sprites = sprites;

// so all the sprites can use it
// Sprite.prototype.context = context;
Sprite.prototype.grid    = grid;
Sprite.prototype.matrix  = new Matrix(2, 3);

var ship = new Ship();

ship.x = Game.canvasWidth / 2;
ship.y = Game.canvasHeight / 2;

// ship.sprites.push(ship);

ship.bullets = [];
for (var i = 0; i < 10; i++) {
  var bull = new Bullet();
  ship.bullets.push(bull);
  // sprites.push(bull);
}
Game.ship = ship;

var io = require('socket.io')(server);

io.on('connection',function(socket){
  console.log('recieved connection');


  socket.on('bullet fire',function(){
    console.log('Somebody is firing the lasers!');
  })

  socket.on('turn',function(status){
  })

  socket.on('start',function(){
    Game.FSM.start();
    console.log('starting game');
  })

  socket.on('move',function(acc){
    Game.ship.acc.x = acc[0];
    Game.ship.acc.y = acc[1];
    console.log('accelerating at: '+acc);
  })

  var updates =setInterval(function(){
    Game.updateData(function (data){
      socket.volatile.broadcast.emit('update',data);
    });
  },100);


  socket.on('disconnect',function(){
    clearInterval(updates);
  })

});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function(){
  console.log('listening on port: '+port);
});


server.on('error', onError);
server.on('listening', onListening);






/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
